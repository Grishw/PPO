@startuml Energy Consumption Accounting System Web App. Диаграмма компонента

' C4
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/php.puml
!include DEVICONS/python.puml

LAYOUT_WITH_LEGEND()
' limit text width
skinparam wrapWidth 250
skinparam wrapMessageWidth 200

'
title "Energy Consumption Accounting System Web App. Диаграмма компонента"


' System

' Client Apps
Container(webApplication, "Web Application", "ReactJS", "Веб интерфейс для простых пользователей")

Container(webApplicationCompany, "Web Application", "ReactJS", "Веб интерфейс для электро компаний")

' base Services
Container(apiGateway, "API Gateway", "C++", "Управляет запросами")
    Rel_D(webApplication, apiGateway, "Использует", "HTTPS")
    Rel_D(webApplicationCompany, apiGateway, "Использует", "HTTPS")

Container(apacheKafkaData, "Очередь данных", "Apache Kafka Partitions", "отвечает за данные по потреблению энергии")
Container(apacheKafkaNotify, "Очередь уведомлений", "Apache Kafka Partitions", "отвечает за данные по потреблению энергии")

System_Boundary(dataProcessService, "Data Process Service") {
    System_Boundary(apiLayre, "API Layer") {
        Container(controllerApi, "controller api data", "Web API Controller", "обрабатывает HTTP запросы, извлекает параметры")
        Container(kafkaConsumer, "fetch msg", "Kafka Consumer", "обрабатывает Massage из Apache Kafka (данные)")
        Container(kafkaProduser, "send msg", "Kafka Produser", "отправляет Massage в Apache Kafka")
            Rel(kafkaProduser, apacheKafkaData, "отпавка сообщения о запросе обновления данных")
            Rel(kafkaProduser, apacheKafkaNotify, "отпавка сообщения о завершение обновления данных")
    }

   
    System_Boundary(appLayre, "APP Layer") {
        System_Boundary(appLayreQueries, "Queries") {
            Container(appLayreQueriesGetPred, "getPredictConsumption", "", "прогноз потребления электричества")
            Container(appLayreQueriesGetRating, "getConsumerRating", "", "рейтинг потребления энергии по приборам")
        }

        System_Boundary(appLayreCommands, "Commands") {
            Container(appLayreCommandsAddData, "Add Data", "", "добавление данных датчика")
             Container(appLayreCommandsUpdateData, "Update Data", "", "обнавление данных датчика")
        }
    }
         Rel(apiLayre, appLayre, "использует")

    System_Boundary(domainLayre, "Domain Layer") {
         Container(domainLayreData, "Показания датчика", "Agregate", "показания датчика в определенный момент (день, неделя, месяц)")
    }
        Rel(appLayre, domainLayre, "использует")

    System_Boundary(infrastructureLayre, "Infrastructure Layer") {
         Container(infrastructureLayreORM, "Репозиторий показаний с датчика", "", "Сохранение/Востановление агрегата")
    }
    Rel(appLayre, infrastructureLayre, "использует")
}

Rel_D(apiGateway, controllerApi, "Использует", "HTTPS")

ContainerDb(db_dataProcessService, "Database", "PostgreSQL", "Хранит данные по потреблению энергии") 
    Rel(infrastructureLayre, db_dataProcessService, "чтение/запись")

System_Ext(extPartnersSistems, "Partner's Sistems", "Система учета электроэнергии партнера")
    Rel(controllerApi, extPartnersSistems, "Получает данные от", "JSON/HTTPS")