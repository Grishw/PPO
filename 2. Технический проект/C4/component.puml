@startuml Energy Consumption Accounting System Web App. Диаграмма компонента

' C4
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/php.puml
!include DEVICONS/python.puml

LAYOUT_WITH_LEGEND()
' limit text width
skinparam wrapWidth 250
skinparam wrapMessageWidth 200

'
title "Energy Consumption Accounting System Web App. Диаграмма компонента"


' Client Apps
Container(webApplication, "Web Application", "ReactJS", "Веб интерфейс для простых пользователей")
Container(webApplicationCompany, "Web Application", "ReactJS", "Веб интерфейс для электро компаний")

' Gateway Services
Container(apiGateway, "API Gateway", "C++", "Управляет запросами")

' Kafka Queue
Container(apacheKafkaData, "Очередь данных", "Apache Kafka Partitions", "отвечает за данные по потреблению энергии")
Container(apacheKafkaNotify, "Очередь уведомлений", "Apache Kafka Partitions", "отвечает за данные по потреблению энергии")

' Servise
System_Boundary(dataProcessService, "Data Process Service") {
    ' Api controller class (use all in)
    Container_Boundary(apiProcessingUnit, "apiProcessingUnit") {
        Container(apiDataController, "apiDataController", "Web API Controller", "обрабатывает HTTP запросы, извлекает параметры")
        ' Kafka controller class (use all in)
        Container_Boundary(kafkaController, "kafkaController") {
            Container(kafkaConsumer, "kafkaConsumer", "Kafka Consumer", "обрабатывает Massage из Apache Kafka (данные)")
            Container(kafkaProduser, "kafkaProduser", "Kafka Produser", "отправляет Massage в Apache Kafka")
        }
    }

    ' Work with data class (use all in)
    Container_Boundary(dataProcessUnit, "dataProcessingUnit") {
        ' Save, Read, Owerride, Write ...
        Container(dataManapulatingComponent, "dataManapulatingComponent", "", "управление данными: созранение/чтение/перезапись... ")
        ' Analytics
        Container(dataAnalyticsComponent, "dataAnalyticsComponent", "", "Анализ данных: обработка/прогнозы/рекомендации...")
    }

    ' Work with db class (use all in)
    Container(dbInteractingComponent, "dbInteractingComponent", "", "взаимодействие с баззой данных")
}

' bd component
ContainerDb(db, "Database", "container: PostgreSQL Schema", "Хранит данные по потреблению энергии") 


' References
' apiGateway
webApplication --> apiGateway : "Использует\n [HTTPS]"
webApplicationCompany --> apiGateway : "Использует\n [HTTPS]"
apiGateway --> apiDataController : "Использует\n [HTTPS]"

' kafka
kafkaProduser -left-> apacheKafkaNotify : "отпавка сообщения о завершение обновления данных, о запросе обновления данных, о завершение процесса \n [TCP/HTTPS]"

kafkaConsumer -down-> apacheKafkaNotify : "ожидание сообщения на поступление данных\n [TCP/HTTPS]"
kafkaConsumer -up-> apacheKafkaData : "прием данных\n [TCP/HTTPS]"

' apiProcessingUnit
apiProcessingUnit -down-> dataProcessUnit : "Uses"

' bdInteractingComponent
dataManapulatingComponent -down-> bdInteractingComponent : "Uses"
dataAnalyticsComponent -down-> bdInteractingComponent : "Uses"

' db
dbInteractingComponent -down-> db : "чтение/запись"